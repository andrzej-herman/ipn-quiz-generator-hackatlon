@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider StateProvider

<GenaratorLoader Visible="@IsLoading"/>
<GeneratorHeader Page="Register"/>
<div class="register-content">
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <div class="login-form">
                    <h6>Zaloguj się podając swój adres email oraz hasło</h6>
                    <RadzenTemplateForm TItem="RegisterRequest" Data="@_registerRequest" Submit="Register">
                        <div class="form-group input-icon pt-3">
                            <span class="ti-user form-control-feedback"></span>
                            <RadzenTextBox Name="Email" class="w-100 pl-5" @bind-Value="_registerRequest.Email" Placeholder="twój adres email" />
                            <RadzenRequiredValidator Component="Email" Text="Proszę podać adres email" Popup="false" />
                            <RadzenEmailValidator Component="Email" Text="Nieprawidłowy adres email" Popup="false" />
                        </div>
                        <div class="form-group input-icon">
                            <span class="ti-user form-control-feedback"></span>
                            <RadzenTextBox Name="FirstName" class="w-100 pl-5" @bind-Value="_registerRequest.FirstName" Placeholder="twoje imię" />
                            <RadzenRequiredValidator Component="FirstName" Text="Proszę podać imię" Popup="false" />
                        </div>
                        <div class="form-group input-icon">
                            <span class="ti-user form-control-feedback"></span>
                            <RadzenTextBox Name="LastName" class="w-100 pl-5" @bind-Value="_registerRequest.LastName" Placeholder="twoje nazwisko" />
                            <RadzenRequiredValidator Component="LastName" Text="Proszę podać nazwisko" Popup="false" />
                        </div>
                        <div class="form-group input-icon">
                            <span class="ti-unlock form-control-feedback"></span>
                            <RadzenPassword Name="Password" class="w-100 pl-5" @bind-Value="_registerRequest.Password" Placeholder="twoje hasło" />
                            <RadzenRequiredValidator Component="Password" Text="Proszę podać hasło" Popup="false" />
                            <RadzenLengthValidator Component="Password" Min="6" Text="Minimalna długość hasło to 6 znaków" Popup="false" />
                        </div>
                        <div class="form-group input-icon pt-3">
                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Info" class="w-100">Zarejestruj konto</RadzenButton>
                            <div class="pt-2">Masz już konto w serwisie? <a href="/login">Zaloguj się</a></div>
                        </div>
                        @if (AuthError != null)
                        {
                            <div class="quiz-generator-alert">@AuthError</div>
                        }
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
    </div>
</div>
<GeneratorFooter />


@code {

    private readonly RegisterRequest _registerRequest = new RegisterRequest();
    private string? AuthError { get; set; }
    private bool IsLoading { get; set; }

    async Task Register()
    {
        IsLoading = true;
        AuthError = null;
        var result = await AuthService.Register(_registerRequest);
        if (!result.Result)
        {
            AuthError = result.Error;
            IsLoading = false;
            return;
        }
        
        var stateProvider = (QuizGeneratorAuthStateProvider) StateProvider;
        await stateProvider.UpdateAuthenticationState(result.UserSession);
        AuthError = null;
        IsLoading = false;
        NavigationManager.NavigateTo($"/generator");
    }
}